functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* Brandon Li
   CPSC 421
   Assignment 4 *)


structure A=Absyn

(* Just to make it shorter, because it's really long to write out *)
fun make_sym(x) = Symbol.symbol(x);
fun make_VarDec(id, typ, exp, pos)            = {var={name=make_sym(id), escape=ref true}, 
                                                 typ=typ, init=exp, pos=pos};
fun make_tyfield(id1, id2, pos)               = {name=make_sym(id1), typ=make_sym(id2), pos=pos};
fun make_param(id1, id2, pos)                 = {var={name=make_sym(id1), escape=ref true}, 
                                                 typ=make_sym(id2), pos=pos};
fun make_fundec(id, params, result, exp, pos) = {name=make_sym(id), params=params, result=result, 
                                                 body=exp, pos=pos};


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\201\000\005\000\201\000\007\000\201\000\009\000\201\000\
\\011\000\201\000\013\000\201\000\015\000\038\000\016\000\037\000\
\\018\000\036\000\019\000\035\000\026\000\201\000\027\000\201\000\
\\031\000\201\000\032\000\201\000\035\000\201\000\036\000\201\000\
\\038\000\201\000\039\000\201\000\043\000\201\000\044\000\201\000\
\\045\000\201\000\000\000\
\\001\000\001\000\202\000\005\000\202\000\007\000\202\000\009\000\202\000\
\\011\000\202\000\013\000\202\000\015\000\038\000\016\000\037\000\
\\018\000\036\000\019\000\035\000\026\000\202\000\027\000\202\000\
\\031\000\202\000\032\000\202\000\035\000\202\000\036\000\202\000\
\\038\000\202\000\039\000\202\000\043\000\202\000\044\000\202\000\
\\045\000\202\000\000\000\
\\001\000\001\000\203\000\005\000\203\000\007\000\203\000\009\000\203\000\
\\011\000\203\000\013\000\203\000\015\000\038\000\016\000\037\000\
\\018\000\036\000\019\000\035\000\026\000\203\000\027\000\203\000\
\\031\000\203\000\032\000\203\000\035\000\203\000\036\000\203\000\
\\038\000\203\000\039\000\203\000\043\000\203\000\044\000\203\000\
\\045\000\203\000\000\000\
\\001\000\001\000\204\000\005\000\204\000\007\000\204\000\009\000\204\000\
\\011\000\204\000\013\000\204\000\015\000\038\000\016\000\037\000\
\\018\000\036\000\019\000\035\000\026\000\204\000\027\000\204\000\
\\031\000\204\000\032\000\204\000\035\000\204\000\036\000\204\000\
\\038\000\204\000\039\000\204\000\043\000\204\000\044\000\204\000\
\\045\000\204\000\000\000\
\\001\000\001\000\205\000\005\000\205\000\007\000\205\000\009\000\205\000\
\\011\000\205\000\013\000\205\000\015\000\038\000\016\000\037\000\
\\018\000\036\000\019\000\035\000\026\000\205\000\027\000\205\000\
\\031\000\205\000\032\000\205\000\035\000\205\000\036\000\205\000\
\\038\000\205\000\039\000\205\000\043\000\205\000\044\000\205\000\
\\045\000\205\000\000\000\
\\001\000\001\000\206\000\005\000\206\000\007\000\206\000\009\000\206\000\
\\011\000\206\000\013\000\206\000\015\000\038\000\016\000\037\000\
\\018\000\036\000\019\000\035\000\026\000\206\000\027\000\206\000\
\\031\000\206\000\032\000\206\000\035\000\206\000\036\000\206\000\
\\038\000\206\000\039\000\206\000\043\000\206\000\044\000\206\000\
\\045\000\206\000\000\000\
\\001\000\002\000\023\000\003\000\022\000\004\000\021\000\008\000\020\000\
\\009\000\100\000\016\000\019\000\030\000\018\000\033\000\017\000\
\\034\000\016\000\037\000\015\000\041\000\014\000\042\000\013\000\000\000\
\\001\000\002\000\023\000\003\000\022\000\004\000\021\000\008\000\020\000\
\\016\000\019\000\030\000\018\000\033\000\017\000\034\000\016\000\
\\037\000\015\000\041\000\014\000\042\000\013\000\000\000\
\\001\000\002\000\048\000\000\000\
\\001\000\002\000\058\000\000\000\
\\001\000\002\000\085\000\000\000\
\\001\000\002\000\086\000\000\000\
\\001\000\002\000\087\000\000\000\
\\001\000\002\000\093\000\000\000\
\\001\000\002\000\096\000\000\000\
\\001\000\002\000\096\000\013\000\095\000\000\000\
\\001\000\002\000\127\000\012\000\126\000\029\000\125\000\000\000\
\\001\000\002\000\129\000\000\000\
\\001\000\002\000\149\000\000\000\
\\001\000\002\000\155\000\000\000\
\\001\000\002\000\158\000\000\000\
\\001\000\002\000\160\000\000\000\
\\001\000\002\000\167\000\000\000\
\\001\000\002\000\168\000\000\000\
\\001\000\002\000\172\000\000\000\
\\001\000\002\000\173\000\000\000\
\\001\000\006\000\111\000\028\000\110\000\000\000\
\\001\000\006\000\143\000\000\000\
\\001\000\006\000\151\000\000\000\
\\001\000\006\000\154\000\020\000\153\000\000\000\
\\001\000\006\000\170\000\000\000\
\\001\000\006\000\171\000\000\000\
\\001\000\008\000\112\000\000\000\
\\001\000\009\000\091\000\000\000\
\\001\000\009\000\121\000\000\000\
\\001\000\009\000\142\000\000\000\
\\001\000\011\000\101\000\015\000\038\000\016\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\027\000\027\000\000\000\
\\001\000\011\000\120\000\015\000\038\000\016\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\027\000\027\000\000\000\
\\001\000\013\000\118\000\000\000\
\\001\000\013\000\150\000\000\000\
\\001\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\
\\031\000\090\000\000\000\
\\001\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\
\\035\000\132\000\000\000\
\\001\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\
\\036\000\089\000\000\000\
\\001\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\
\\036\000\156\000\000\000\
\\001\000\020\000\109\000\000\000\
\\001\000\020\000\119\000\000\000\
\\001\000\020\000\166\000\000\000\
\\001\000\028\000\088\000\000\000\
\\001\000\028\000\141\000\000\000\
\\001\000\038\000\084\000\000\000\
\\001\000\039\000\123\000\000\000\
\\001\000\040\000\138\000\000\000\
\\177\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\178\000\000\000\
\\179\000\000\000\
\\180\000\000\000\
\\181\000\000\000\
\\182\000\000\000\
\\183\000\000\000\
\\184\000\000\000\
\\185\000\000\000\
\\186\000\000\000\
\\187\000\028\000\026\000\000\000\
\\188\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\189\000\000\000\
\\190\000\000\000\
\\191\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\192\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\
\\032\000\133\000\000\000\
\\193\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\194\000\000\000\
\\195\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\196\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\197\000\018\000\036\000\019\000\035\000\000\000\
\\198\000\018\000\036\000\019\000\035\000\000\000\
\\199\000\000\000\
\\200\000\000\000\
\\207\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\000\000\
\\208\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\209\000\000\000\
\\210\000\000\000\
\\211\000\005\000\147\000\015\000\038\000\016\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\027\000\027\000\000\000\
\\212\000\000\000\
\\213\000\000\000\
\\214\000\000\000\
\\215\000\005\000\122\000\015\000\038\000\016\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\027\000\027\000\000\000\
\\216\000\000\000\
\\217\000\043\000\047\000\044\000\046\000\045\000\045\000\000\000\
\\218\000\000\000\
\\219\000\000\000\
\\220\000\000\000\
\\221\000\000\000\
\\222\000\000\000\
\\223\000\043\000\047\000\044\000\046\000\000\000\
\\224\000\000\000\
\\225\000\000\000\
\\226\000\044\000\046\000\045\000\045\000\000\000\
\\227\000\000\000\
\\228\000\000\000\
\\229\000\043\000\047\000\000\000\
\\230\000\000\000\
\\231\000\000\000\
\\232\000\045\000\045\000\000\000\
\\233\000\002\000\023\000\003\000\022\000\004\000\021\000\008\000\020\000\
\\016\000\019\000\030\000\018\000\033\000\017\000\034\000\016\000\
\\037\000\015\000\041\000\014\000\042\000\013\000\000\000\
\\234\000\007\000\092\000\015\000\038\000\016\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\027\000\027\000\000\000\
\\235\000\000\000\
\\236\000\007\000\134\000\015\000\038\000\016\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\027\000\027\000\000\000\
\\237\000\000\000\
\\238\000\000\000\
\\239\000\000\000\
\\240\000\000\000\
\\241\000\000\000\
\\242\000\002\000\140\000\000\000\
\\243\000\000\000\
\\244\000\000\000\
\\245\000\005\000\165\000\000\000\
\\246\000\002\000\131\000\000\000\
\\247\000\000\000\
\\248\000\000\000\
\\249\000\005\000\162\000\000\000\
\\250\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\251\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\252\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\253\000\015\000\038\000\016\000\037\000\018\000\036\000\019\000\035\000\
\\020\000\034\000\021\000\033\000\022\000\032\000\023\000\031\000\
\\024\000\030\000\025\000\029\000\026\000\028\000\027\000\027\000\000\000\
\\254\000\008\000\057\000\010\000\056\000\012\000\055\000\014\000\054\000\000\000\
\\255\000\010\000\025\000\014\000\024\000\000\000\
\\000\001\000\000\
\\001\001\000\000\
\\002\001\040\000\136\000\000\000\
\\003\001\000\000\
\\004\001\000\000\
\\005\001\000\000\
\"
val actionRowNumbers =
"\008\000\127\000\126\000\125\000\
\\063\000\062\000\061\000\060\000\
\\059\000\058\000\053\000\054\000\
\\057\000\087\000\009\000\008\000\
\\008\000\008\000\103\000\056\000\
\\055\000\124\000\010\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\102\000\099\000\087\000\
\\093\000\096\000\050\000\011\000\
\\012\000\013\000\048\000\043\000\
\\041\000\066\000\034\000\104\000\
\\014\000\016\000\008\000\007\000\
\\131\000\037\000\064\000\078\000\
\\077\000\006\000\005\000\004\000\
\\003\000\002\000\001\000\076\000\
\\075\000\074\000\073\000\102\000\
\\100\000\099\000\097\000\089\000\
\\087\000\096\000\090\000\087\000\
\\093\000\088\000\103\000\045\000\
\\027\000\033\000\008\000\008\000\
\\008\000\065\000\008\000\130\000\
\\039\000\079\000\046\000\038\000\
\\035\000\085\000\083\000\129\000\
\\101\000\098\000\092\000\091\000\
\\095\000\094\000\051\000\017\000\
\\008\000\018\000\116\000\042\000\
\\069\000\068\000\105\000\106\000\
\\080\000\008\000\128\000\084\000\
\\008\000\070\000\108\000\052\000\
\\112\000\109\000\120\000\049\000\
\\036\000\028\000\008\000\008\000\
\\008\000\081\000\008\000\086\000\
\\019\000\040\000\029\000\008\000\
\\030\000\020\000\044\000\067\000\
\\107\000\015\000\072\000\111\000\
\\110\000\021\000\121\000\008\000\
\\022\000\119\000\008\000\082\000\
\\115\000\122\000\047\000\117\000\
\\023\000\071\000\113\000\024\000\
\\008\000\031\000\032\000\123\000\
\\025\000\026\000\119\000\115\000\
\\118\000\114\000\000\000"
val gotoT =
"\
\\001\000\010\000\002\000\174\000\003\000\009\000\004\000\008\000\
\\005\000\007\000\006\000\006\000\008\000\005\000\027\000\004\000\
\\028\000\003\000\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\042\000\015\000\041\000\016\000\040\000\019\000\039\000\
\\020\000\038\000\021\000\037\000\000\000\
\\000\000\
\\001\000\047\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\048\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\049\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\051\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\010\000\050\000\027\000\004\000\
\\028\000\003\000\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\057\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\058\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\059\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\060\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\061\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\062\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\063\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\064\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\065\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\066\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\067\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\068\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\069\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\070\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\018\000\072\000\021\000\071\000\000\000\
\\017\000\074\000\020\000\073\000\000\000\
\\012\000\075\000\015\000\041\000\016\000\040\000\019\000\039\000\
\\020\000\038\000\021\000\037\000\000\000\
\\014\000\078\000\015\000\077\000\019\000\076\000\020\000\038\000\000\000\
\\013\000\081\000\016\000\080\000\019\000\079\000\021\000\037\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\092\000\000\000\
\\001\000\095\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\097\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\009\000\096\000\027\000\004\000\
\\028\000\003\000\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\100\000\021\000\071\000\000\000\
\\000\000\
\\017\000\101\000\020\000\073\000\000\000\
\\000\000\
\\000\000\
\\012\000\102\000\015\000\041\000\016\000\040\000\019\000\039\000\
\\020\000\038\000\021\000\037\000\000\000\
\\013\000\103\000\016\000\080\000\019\000\079\000\021\000\037\000\000\000\
\\000\000\
\\012\000\104\000\015\000\041\000\016\000\040\000\019\000\039\000\
\\020\000\038\000\021\000\037\000\000\000\
\\014\000\105\000\015\000\077\000\019\000\076\000\020\000\038\000\000\000\
\\000\000\
\\001\000\051\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\010\000\106\000\027\000\004\000\
\\028\000\003\000\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\111\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\112\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\113\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\001\000\115\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\011\000\114\000\027\000\004\000\
\\028\000\003\000\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\022\000\122\000\000\000\
\\001\000\126\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\025\000\128\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\133\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\097\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\009\000\135\000\027\000\004\000\
\\028\000\003\000\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\137\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\142\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\143\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\001\000\115\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\011\000\144\000\027\000\004\000\
\\028\000\003\000\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\001\000\146\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\150\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\155\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\157\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\026\000\159\000\000\000\
\\001\000\161\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\024\000\162\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\167\000\003\000\009\000\004\000\008\000\005\000\007\000\
\\006\000\006\000\008\000\005\000\027\000\004\000\028\000\003\000\
\\029\000\002\000\030\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\172\000\000\000\
\\024\000\173\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 175
val numrules = 85
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | lvalue_field of unit ->  (A.var)
 | lvalue_array of unit ->  (A.var)
 | lvalue_recurse of unit ->  (A.var) | lvalue of unit ->  (A.var)
 | params_tail of unit ->  (A.formals list)
 | params of unit ->  (A.formals list)
 | tyfields_tail of unit ->  (A.tfield list)
 | tyfields of unit ->  (A.tfield list) | ty of unit ->  (A.ty)
 | tydec of unit ->  ({ name:A.symbol,ty:A.ty,pos:pos } )
 | fundec of unit ->  (A.fundec) | vardec of unit ->  (A.dec)
 | tydec_seq_tail of unit ->  ({ name:A.symbol,ty:A.ty,pos:pos }  list)
 | fundec_seq_tail of unit ->  (A.fundec list)
 | tydec_seq of unit ->  (A.dec) | fundec_seq of unit ->  (A.dec)
 | post_ty_dec_seq of unit ->  (A.dec list)
 | post_fun_dec_seq of unit ->  (A.dec list)
 | decseq of unit ->  (A.dec list)
 | expseq_tail of unit ->  ( ( A.exp * pos )  list)
 | exp_seq of unit ->  ( ( A.exp * pos )  list)
 | func_args of unit ->  (A.exp list) | func_call of unit ->  (A.exp)
 | rec_entries of unit ->  (A.efield list)
 | record of unit ->  (A.exp) | bool_exp of unit ->  (A.exp)
 | comparison of unit ->  (A.exp) | arithmetic of unit ->  (A.exp)
 | program of unit ->  (A.exp) | exp of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 32) => true | (T 33) => true | (T 34) => true | (T 40) => true
 | (T 36) => true | (T 37) => true | (T 38) => true | (T 42) => true
 | (T 43) => true | (T 44) => true | (T 28) => true | (T 29) => true
 | (T 30) => true | (T 31) => true | (T 35) => true | (T 39) => true
 | (T 41) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 31))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "UMINUS"
  | (T 17) => "TIMES"
  | (T 18) => "DIVIDE"
  | (T 19) => "EQ"
  | (T 20) => "NEQ"
  | (T 21) => "LT"
  | (T 22) => "LE"
  | (T 23) => "GT"
  | (T 24) => "GE"
  | (T 25) => "AND"
  | (T 26) => "OR"
  | (T 27) => "ASSIGN"
  | (T 28) => "ARRAY"
  | (T 29) => "IF"
  | (T 30) => "THEN"
  | (T 31) => "ELSE"
  | (T 32) => "WHILE"
  | (T 33) => "FOR"
  | (T 34) => "TO"
  | (T 35) => "DO"
  | (T 36) => "LET"
  | (T 37) => "IN"
  | (T 38) => "END"
  | (T 39) => "OF"
  | (T 40) => "BREAK"
  | (T 41) => "NIL"
  | (T 42) => "FUNCTION"
  | (T 43) => "VAR"
  | (T 44) => "TYPE"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38)
 $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31)
 $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24)
 $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17)
 $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10)
 $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 1, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => (A.NilExp))
 in ( LrTable.NT 0, ( result, NIL1left, NIL1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  (INT as INT1) = 
INT1 ()
 in (A.IntExp(INT))
end)
 in ( LrTable.NT 0, ( result, INT1left, INT1right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left),
 STRING1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (STRING as STRING1) = STRING1 ()
 in (A.StringExp(STRING, STRINGleft))
end)
 in ( LrTable.NT 0, ( result, STRING1left, STRING1right), rest671)
end
|  ( 4, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => (
A.BreakExp(BREAKleft)))
 in ( LrTable.NT 0, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.arithmetic arithmetic1, arithmetic1left, 
arithmetic1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (arithmetic as arithmetic1) = arithmetic1 ()
 in (arithmetic)
end)
 in ( LrTable.NT 0, ( result, arithmetic1left, arithmetic1right), 
rest671)
end
|  ( 6, ( ( _, ( MlyValue.comparison comparison1, comparison1left, 
comparison1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (comparison as comparison1) = comparison1 ()
 in (comparison)
end)
 in ( LrTable.NT 0, ( result, comparison1left, comparison1right), 
rest671)
end
|  ( 7, ( ( _, ( MlyValue.bool_exp bool_exp1, bool_exp1left, 
bool_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (bool_exp as bool_exp1) = bool_exp1 ()
 in (bool_exp)
end)
 in ( LrTable.NT 0, ( result, bool_exp1left, bool_exp1right), rest671)

end
|  ( 8, ( ( _, ( MlyValue.record record1, record1left, record1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
record as record1) = record1 ()
 in (record)
end)
 in ( LrTable.NT 0, ( result, record1left, record1right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.func_call func_call1, func_call1left, 
func_call1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (func_call as func_call1) = func_call1 ()
 in (func_call)
end)
 in ( LrTable.NT 0, ( result, func_call1left, func_call1right), 
rest671)
end
|  ( 10, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
lvalue as lvalue1) = lvalue1 ()
 in (A.VarExp(lvalue))
end)
 in ( LrTable.NT 0, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, (lvalueleft as lvalue1left), _)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  (lvalue as 
lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.AssignExp({var=lvalue, exp=exp, pos=lvalueleft}))
end)
 in ( LrTable.NT 0, ( result, lvalue1left, exp1right), rest671)
end
|  ( 12, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.exp_seq 
exp_seq1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.exp (fn _ => let val  (exp_seq as exp_seq1) = 
exp_seq1 ()
 in (A.SeqExp(exp_seq))
end)
 in ( LrTable.NT 0, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (exp as exp1) = exp1 ()
 in (
A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, 
                                     pos=MINUSleft})
)
end)
 in ( LrTable.NT 0, ( result, MINUS1left, exp1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (A.IfExp({test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft}))

end)
 in ( LrTable.NT 0, ( result, IF1left, exp3right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  exp1 = 
exp1 ()
 val  exp2 = exp2 ()
 in (A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=IFleft}))
end)
 in ( LrTable.NT 0, ( result, IF1left, exp2right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  exp1
 = exp1 ()
 val  exp2 = exp2 ()
 in (A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
end)
 in ( LrTable.NT 0, ( result, WHILE1left, exp2right), rest671)
end
|  ( 17, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.exp_seq 
exp_seq1, _, _)) :: _ :: ( _, ( MlyValue.decseq decseq1, _, _)) :: ( _
, ( _, (LETleft as LET1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (decseq as decseq1) = decseq1 ()
 val  (exp_seq as exp_seq1) = exp_seq1 ()
 in (A.LetExp({decs=decseq, body=A.SeqExp(exp_seq), pos=LETleft}))
end
)
 in ( LrTable.NT 0, ( result, LET1left, END1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FORleft as FOR1left
), _)) :: rest671)) => let val  result = MlyValue.exp (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.ForExp({var={name=make_sym(ID), escape=ref true}, 
                                             lo=exp1, hi=exp2, body=exp3, pos=FORleft})
)
end)
 in ( LrTable.NT 0, ( result, FOR1left, exp3right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft
 as ID1left), _)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.ArrayExp({typ=make_sym(ID), size=exp1, 
                                               init=exp2, pos=IDleft})
)
end)
 in ( LrTable.NT 0, ( result, ID1left, exp2right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.PlusOp,   right=exp2, pos=exp1left}))

end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.MinusOp,  right=exp2, pos=exp1left}))

end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.TimesOp,  right=exp2, pos=exp1left}))

end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left}))

end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.EqOp,  right=exp2, pos=exp1left}))
end
)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left}))
end
)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.LtOp,  right=exp2, pos=exp1left}))
end
)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.LeOp,  right=exp2, pos=exp1left}))
end
)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.GtOp,  right=exp2, pos=exp1left}))
end
)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left=exp1, oper=A.GeOp,  right=exp2, pos=exp1left}))
end
)
 in ( LrTable.NT 3, ( result, exp1left, exp2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.bool_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp({test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left})
)
end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.bool_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp({test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left})
)
end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 32, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.record (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.RecordExp({typ=make_sym(ID), fields=nil, pos=IDleft}))
end)
 in ( LrTable.NT 5, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 33, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.rec_entries 
rec_entries1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as 
ID1left), _)) :: rest671)) => let val  result = MlyValue.record (fn _
 => let val  (ID as ID1) = ID1 ()
 val  (rec_entries as rec_entries1) = rec_entries1 ()
 in (
A.RecordExp({typ=make_sym(ID), fields=rec_entries, 
                                                         pos=IDleft})
)
end)
 in ( LrTable.NT 5, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.rec_entries (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in ((make_sym(ID), exp, IDleft)::nil)
end)
 in ( LrTable.NT 6, ( result, ID1left, exp1right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.rec_entries rec_entries1, _, 
rec_entries1right)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: (
 _, ( MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let
 val  result = MlyValue.rec_entries (fn _ => let val  (ID as ID1) = 
ID1 ()
 val  (exp as exp1) = exp1 ()
 val  (rec_entries as rec_entries1) = rec_entries1 ()
 in ((make_sym(ID), exp, IDleft)::rec_entries)
end)
 in ( LrTable.NT 6, ( result, ID1left, rec_entries1right), rest671)

end
|  ( 36, ( ( _, ( _, _, RPAREN1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.func_call (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.AppExp({func=make_sym(ID), args=nil, pos=IDleft}))
end)
 in ( LrTable.NT 7, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 37, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.func_args 
func_args1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left)
, _)) :: rest671)) => let val  result = MlyValue.func_call (fn _ =>
 let val  (ID as ID1) = ID1 ()
 val  (func_args as func_args1) = func_args1 ()
 in (
A.AppExp({func=make_sym(ID), args=func_args, 
                                                      pos=IDleft})
)
end)
 in ( LrTable.NT 7, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.func_args (fn _ => let val  (exp as 
exp1) = exp1 ()
 in (exp::nil)
end)
 in ( LrTable.NT 8, ( result, exp1left, exp1right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.func_args func_args1, _, func_args1right))
 :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let
 val  result = MlyValue.func_args (fn _ => let val  (exp as exp1) = 
exp1 ()
 val  (func_args as func_args1) = func_args1 ()
 in (exp::func_args)
end)
 in ( LrTable.NT 8, ( result, exp1left, func_args1right), rest671)
end
|  ( 40, ( rest671)) => let val  result = MlyValue.decseq (fn _ => (
nil))
 in ( LrTable.NT 11, ( result, defaultPos, defaultPos), rest671)
end
|  ( 41, ( ( _, ( MlyValue.post_fun_dec_seq post_fun_dec_seq1, _, 
post_fun_dec_seq1right)) :: ( _, ( MlyValue.fundec_seq fundec_seq1, 
fundec_seq1left, _)) :: rest671)) => let val  result = MlyValue.decseq
 (fn _ => let val  (fundec_seq as fundec_seq1) = fundec_seq1 ()
 val  (post_fun_dec_seq as post_fun_dec_seq1) = post_fun_dec_seq1 ()
 in (fundec_seq::post_fun_dec_seq)
end)
 in ( LrTable.NT 11, ( result, fundec_seq1left, post_fun_dec_seq1right
), rest671)
end
|  ( 42, ( ( _, ( MlyValue.decseq decseq1, _, decseq1right)) :: ( _, (
 MlyValue.vardec vardec1, vardec1left, _)) :: rest671)) => let val  
result = MlyValue.decseq (fn _ => let val  (vardec as vardec1) = 
vardec1 ()
 val  (decseq as decseq1) = decseq1 ()
 in (vardec::decseq)
end)
 in ( LrTable.NT 11, ( result, vardec1left, decseq1right), rest671)

end
|  ( 43, ( ( _, ( MlyValue.post_ty_dec_seq post_ty_dec_seq1, _, 
post_ty_dec_seq1right)) :: ( _, ( MlyValue.tydec_seq tydec_seq1, 
tydec_seq1left, _)) :: rest671)) => let val  result = MlyValue.decseq
 (fn _ => let val  (tydec_seq as tydec_seq1) = tydec_seq1 ()
 val  (post_ty_dec_seq as post_ty_dec_seq1) = post_ty_dec_seq1 ()
 in (tydec_seq::post_ty_dec_seq)
end)
 in ( LrTable.NT 11, ( result, tydec_seq1left, post_ty_dec_seq1right),
 rest671)
end
|  ( 44, ( ( _, ( MlyValue.post_fun_dec_seq post_fun_dec_seq1, _, 
post_fun_dec_seq1right)) :: ( _, ( MlyValue.fundec_seq fundec_seq1, 
fundec_seq1left, _)) :: rest671)) => let val  result = 
MlyValue.post_ty_dec_seq (fn _ => let val  (fundec_seq as fundec_seq1)
 = fundec_seq1 ()
 val  (post_fun_dec_seq as post_fun_dec_seq1) = post_fun_dec_seq1 ()
 in (fundec_seq::post_fun_dec_seq)
end)
 in ( LrTable.NT 13, ( result, fundec_seq1left, post_fun_dec_seq1right
), rest671)
end
|  ( 45, ( ( _, ( MlyValue.decseq decseq1, _, decseq1right)) :: ( _, (
 MlyValue.vardec vardec1, vardec1left, _)) :: rest671)) => let val  
result = MlyValue.post_ty_dec_seq (fn _ => let val  (vardec as vardec1
) = vardec1 ()
 val  (decseq as decseq1) = decseq1 ()
 in (vardec::decseq)
end)
 in ( LrTable.NT 13, ( result, vardec1left, decseq1right), rest671)

end
|  ( 46, ( rest671)) => let val  result = MlyValue.post_ty_dec_seq (fn
 _ => (nil))
 in ( LrTable.NT 13, ( result, defaultPos, defaultPos), rest671)
end
|  ( 47, ( ( _, ( MlyValue.post_ty_dec_seq post_ty_dec_seq1, _, 
post_ty_dec_seq1right)) :: ( _, ( MlyValue.tydec_seq tydec_seq1, 
tydec_seq1left, _)) :: rest671)) => let val  result = 
MlyValue.post_fun_dec_seq (fn _ => let val  (tydec_seq as tydec_seq1)
 = tydec_seq1 ()
 val  (post_ty_dec_seq as post_ty_dec_seq1) = post_ty_dec_seq1 ()
 in (tydec_seq::post_ty_dec_seq)
end)
 in ( LrTable.NT 12, ( result, tydec_seq1left, post_ty_dec_seq1right),
 rest671)
end
|  ( 48, ( ( _, ( MlyValue.decseq decseq1, _, decseq1right)) :: ( _, (
 MlyValue.vardec vardec1, vardec1left, _)) :: rest671)) => let val  
result = MlyValue.post_fun_dec_seq (fn _ => let val  (vardec as 
vardec1) = vardec1 ()
 val  (decseq as decseq1) = decseq1 ()
 in (vardec::decseq)
end)
 in ( LrTable.NT 12, ( result, vardec1left, decseq1right), rest671)

end
|  ( 49, ( rest671)) => let val  result = MlyValue.post_fun_dec_seq
 (fn _ => (nil))
 in ( LrTable.NT 12, ( result, defaultPos, defaultPos), rest671)
end
|  ( 50, ( ( _, ( MlyValue.fundec_seq_tail fundec_seq_tail1, _, 
fundec_seq_tail1right)) :: ( _, ( MlyValue.fundec fundec1, fundec1left
, _)) :: rest671)) => let val  result = MlyValue.fundec_seq (fn _ =>
 let val  (fundec as fundec1) = fundec1 ()
 val  (fundec_seq_tail as fundec_seq_tail1) = fundec_seq_tail1 ()
 in (A.FunctionDec(fundec::fundec_seq_tail))
end)
 in ( LrTable.NT 14, ( result, fundec1left, fundec_seq_tail1right), 
rest671)
end
|  ( 51, ( ( _, ( MlyValue.fundec_seq_tail fundec_seq_tail1, _, 
fundec_seq_tail1right)) :: ( _, ( MlyValue.fundec fundec1, fundec1left
, _)) :: rest671)) => let val  result = MlyValue.fundec_seq_tail (fn _
 => let val  (fundec as fundec1) = fundec1 ()
 val  (fundec_seq_tail as fundec_seq_tail1) = fundec_seq_tail1 ()
 in (fundec::fundec_seq_tail)
end)
 in ( LrTable.NT 16, ( result, fundec1left, fundec_seq_tail1right), 
rest671)
end
|  ( 52, ( rest671)) => let val  result = MlyValue.fundec_seq_tail (fn
 _ => (nil))
 in ( LrTable.NT 16, ( result, defaultPos, defaultPos), rest671)
end
|  ( 53, ( ( _, ( MlyValue.tydec_seq_tail tydec_seq_tail1, _, 
tydec_seq_tail1right)) :: ( _, ( MlyValue.tydec tydec1, tydec1left, _)
) :: rest671)) => let val  result = MlyValue.tydec_seq (fn _ => let
 val  (tydec as tydec1) = tydec1 ()
 val  (tydec_seq_tail as tydec_seq_tail1) = tydec_seq_tail1 ()
 in (A.TypeDec(tydec::tydec_seq_tail))
end)
 in ( LrTable.NT 15, ( result, tydec1left, tydec_seq_tail1right), 
rest671)
end
|  ( 54, ( ( _, ( MlyValue.tydec_seq_tail tydec_seq_tail1, _, 
tydec_seq_tail1right)) :: ( _, ( MlyValue.tydec tydec1, tydec1left, _)
) :: rest671)) => let val  result = MlyValue.tydec_seq_tail (fn _ =>
 let val  (tydec as tydec1) = tydec1 ()
 val  (tydec_seq_tail as tydec_seq_tail1) = tydec_seq_tail1 ()
 in (tydec::tydec_seq_tail)
end)
 in ( LrTable.NT 17, ( result, tydec1left, tydec_seq_tail1right), 
rest671)
end
|  ( 55, ( rest671)) => let val  result = MlyValue.tydec_seq_tail (fn
 _ => (nil))
 in ( LrTable.NT 17, ( result, defaultPos, defaultPos), rest671)
end
|  ( 56, ( rest671)) => let val  result = MlyValue.exp_seq (fn _ => (
nil))
 in ( LrTable.NT 9, ( result, defaultPos, defaultPos), rest671)
end
|  ( 57, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.exp_seq (fn _ => let val 
 (exp as exp1) = exp1 ()
 in ((exp, expleft)::nil)
end)
 in ( LrTable.NT 9, ( result, exp1left, exp1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.expseq_tail expseq_tail1, _, 
expseq_tail1right)) :: _ :: ( _, ( MlyValue.exp exp1, (expleft as 
exp1left), _)) :: rest671)) => let val  result = MlyValue.exp_seq (fn
 _ => let val  (exp as exp1) = exp1 ()
 val  (expseq_tail as expseq_tail1) = expseq_tail1 ()
 in ((exp, expleft)::expseq_tail)
end)
 in ( LrTable.NT 9, ( result, exp1left, expseq_tail1right), rest671)

end
|  ( 59, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.expseq_tail (fn _ => let
 val  (exp as exp1) = exp1 ()
 in ((exp, expleft)::nil)
end)
 in ( LrTable.NT 10, ( result, exp1left, exp1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.expseq_tail expseq_tail1, _, 
expseq_tail1right)) :: _ :: ( _, ( MlyValue.exp exp1, (expleft as 
exp1left), _)) :: rest671)) => let val  result = MlyValue.expseq_tail
 (fn _ => let val  (exp as exp1) = exp1 ()
 val  (expseq_tail as expseq_tail1) = expseq_tail1 ()
 in ((exp, expleft)::expseq_tail)
end)
 in ( LrTable.NT 10, ( result, exp1left, expseq_tail1right), rest671)

end
|  ( 61, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.tydec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in ({name=make_sym(ID), ty=ty, pos=TYPEleft})
end)
 in ( LrTable.NT 20, ( result, TYPE1left, ty1right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (ID as 
ID1) = ID1 ()
 in (A.NameTy(make_sym(ID), IDleft))
end)
 in ( LrTable.NT 21, ( result, ID1left, ID1right), rest671)
end
|  ( 63, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ty (fn _ => let val  (tyfields as tyfields1) =
 tyfields1 ()
 in (A.RecordTy(tyfields))
end)
 in ( LrTable.NT 21, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 64, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, (
ARRAYleft as ARRAY1left), _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.ArrayTy(make_sym(ID), ARRAYleft))
end)
 in ( LrTable.NT 21, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 65, ( rest671)) => let val  result = MlyValue.tyfields (fn _ => (
nil))
 in ( LrTable.NT 22, ( result, defaultPos, defaultPos), rest671)
end
|  ( 66, ( ( _, ( MlyValue.tyfields_tail tyfields_tail1, _, 
tyfields_tail1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, (
 MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.tyfields (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (tyfields_tail as tyfields_tail1) = tyfields_tail1 ()
 in (make_tyfield(ID1, ID2, IDleft)::tyfields_tail)
end)
 in ( LrTable.NT 22, ( result, ID1left, tyfields_tail1right), rest671)

end
|  ( 67, ( ( _, ( MlyValue.tyfields_tail tyfields_tail1, _, 
tyfields_tail1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, (
 MlyValue.ID ID1, IDleft, _)) :: ( _, ( _, COMMA1left, _)) :: rest671)
) => let val  result = MlyValue.tyfields_tail (fn _ => let val  ID1 = 
ID1 ()
 val  ID2 = ID2 ()
 val  (tyfields_tail as tyfields_tail1) = tyfields_tail1 ()
 in (make_tyfield(ID1, ID2, IDleft)::tyfields_tail)
end)
 in ( LrTable.NT 23, ( result, COMMA1left, tyfields_tail1right), 
rest671)
end
|  ( 68, ( rest671)) => let val  result = MlyValue.tyfields_tail (fn _
 => (nil))
 in ( LrTable.NT 23, ( result, defaultPos, defaultPos), rest671)
end
|  ( 69, ( rest671)) => let val  result = MlyValue.params (fn _ => (
nil))
 in ( LrTable.NT 24, ( result, defaultPos, defaultPos), rest671)
end
|  ( 70, ( ( _, ( MlyValue.params_tail params_tail1, _, 
params_tail1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.params (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (params_tail as params_tail1) = params_tail1 ()
 in (make_param(ID1, ID2, IDleft)::params_tail)
end)
 in ( LrTable.NT 24, ( result, ID1left, params_tail1right), rest671)

end
|  ( 71, ( ( _, ( MlyValue.params_tail params_tail1, _, 
params_tail1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, IDleft, _)) :: ( _, ( _, COMMA1left, _)) :: rest671))
 => let val  result = MlyValue.params_tail (fn _ => let val  ID1 = ID1
 ()
 val  ID2 = ID2 ()
 val  (params_tail as params_tail1) = params_tail1 ()
 in (make_param(ID1, ID2, IDleft)::params_tail)
end)
 in ( LrTable.NT 25, ( result, COMMA1left, params_tail1right), rest671
)
end
|  ( 72, ( rest671)) => let val  result = MlyValue.params_tail (fn _
 => (nil))
 in ( LrTable.NT 25, ( result, defaultPos, defaultPos), rest671)
end
|  ( 73, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (VARleft as VAR1left), _)) :: 
rest671)) => let val  result = MlyValue.vardec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (A.VarDec(make_VarDec(ID, NONE, exp, VARleft)))
end)
 in ( LrTable.NT 18, ( result, VAR1left, exp1right), rest671)
end
|  ( 74, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.vardec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec(make_VarDec(ID1, SOME(make_sym(ID2), 
                                                                                   ID2left), 
                                                                         exp, VARleft))
)
end)
 in ( LrTable.NT 18, ( result, VAR1left, exp1right), rest671)
end
|  ( 75, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.params params1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _
)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) =>
 let val  result = MlyValue.fundec (fn _ => let val  (ID as ID1) = ID1
 ()
 val  (params as params1) = params1 ()
 val  (exp as exp1) = exp1 ()
 in (make_fundec(ID, params, NONE, exp, FUNCTIONleft))
end)
 in ( LrTable.NT 19, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 76, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.params 
params1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (
FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let val  result = 
MlyValue.fundec (fn _ => let val  ID1 = ID1 ()
 val  (params as params1) = params1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
make_fundec(ID1, params, SOME(make_sym(ID2), 
                                                                                 ID2left), 
                                                               exp, FUNCTIONleft)
)
end)
 in ( LrTable.NT 19, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 77, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.lvalue (fn _ => let val  (ID
 as ID1) = ID1 ()
 in (A.SimpleVar(make_sym(ID), IDleft))
end)
 in ( LrTable.NT 26, ( result, ID1left, ID1right), rest671)
end
|  ( 78, ( ( _, ( MlyValue.lvalue_recurse lvalue_recurse1, 
lvalue_recurse1left, lvalue_recurse1right)) :: rest671)) => let val  
result = MlyValue.lvalue (fn _ => let val  (lvalue_recurse as 
lvalue_recurse1) = lvalue_recurse1 ()
 in (lvalue_recurse)
end)
 in ( LrTable.NT 26, ( result, lvalue_recurse1left, 
lvalue_recurse1right), rest671)
end
|  ( 79, ( ( _, ( MlyValue.lvalue_array lvalue_array1, 
lvalue_array1left, lvalue_array1right)) :: rest671)) => let val  
result = MlyValue.lvalue_recurse (fn _ => let val  (lvalue_array as 
lvalue_array1) = lvalue_array1 ()
 in (lvalue_array)
end)
 in ( LrTable.NT 27, ( result, lvalue_array1left, lvalue_array1right),
 rest671)
end
|  ( 80, ( ( _, ( MlyValue.lvalue_field lvalue_field1, 
lvalue_field1left, lvalue_field1right)) :: rest671)) => let val  
result = MlyValue.lvalue_recurse (fn _ => let val  (lvalue_field as 
lvalue_field1) = lvalue_field1 ()
 in (lvalue_field)
end)
 in ( LrTable.NT 27, ( result, lvalue_field1left, lvalue_field1right),
 rest671)
end
|  ( 81, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left), _)) :: 
rest671)) => let val  result = MlyValue.lvalue_array (fn _ => let val 
 (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.SubscriptVar(A.SimpleVar(make_sym(ID), 
                                                                                  IDleft), 
                                                                      exp, IDleft)
)
end)
 in ( LrTable.NT 28, ( result, ID1left, RBRACK1right), rest671)
end
|  ( 82, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: _ :: ( _, ( MlyValue.lvalue_recurse lvalue_recurse1, (
lvalue_recurseleft as lvalue_recurse1left), _)) :: rest671)) => let
 val  result = MlyValue.lvalue_array (fn _ => let val  (lvalue_recurse
 as lvalue_recurse1) = lvalue_recurse1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.SubscriptVar(lvalue_recurse, exp, 
                                                                      lvalue_recurseleft)
)
end)
 in ( LrTable.NT 28, ( result, lvalue_recurse1left, RBRACK1right), 
rest671)
end
|  ( 83, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.lvalue_field (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in (
A.FieldVar(A.SimpleVar(make_sym(ID1), 
                                                                  ID1left), make_sym(ID2), ID1left)
)
end)
 in ( LrTable.NT 29, ( result, ID1left, ID2right), rest671)
end
|  ( 84, ( ( _, ( MlyValue.ID ID1, IDleft, ID1right)) :: _ :: ( _, ( 
MlyValue.lvalue_recurse lvalue_recurse1, lvalue_recurse1left, _)) :: 
rest671)) => let val  result = MlyValue.lvalue_field (fn _ => let val 
 (lvalue_recurse as lvalue_recurse1) = lvalue_recurse1 ()
 val  (ID as ID1) = ID1 ()
 in (
A.FieldVar(lvalue_recurse, make_sym(ID), 
                                                                  IDleft)
)
end)
 in ( LrTable.NT 29, ( result, lvalue_recurse1left, ID1right), rest671
)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
end
end
