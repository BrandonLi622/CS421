(* Brandon Li
   CPSC 421
   Assignment 4 *)


structure A=Absyn

(* Just to make it shorter, because it's really long to write out *)
fun make_VarDec(
fun make_sym(x) = Symbol.symbol(x);
fun make_tyfield(id1, id2, pos) = {name=make_sym(id1), typ=make_sym(id2), pos=pos}
fun make_param(id1, id2, pos) = {var={name=make_sym(id1), escape=ref false}, 
                                      typ=make_sym(id2), pos=pos}

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp of A.exp | program of A.exp | arithmetic of A.exp | comparison of A.exp |
          bool_exp of A.exp | record of A.exp | rec_entries of A.efield list | func_call of A.exp |
          func_args of A.exp list | 
          exp_seq of (A.exp * pos) list | expseq_tail of (A.exp * pos) list |
          decseq of A.dec list | post_fun_dec_seq of A.dec list | post_ty_dec_seq of A.dec list |
          fundec_seq of A.dec | tydec_seq of A.dec | 
          fundec_seq_tail of A.fundec list | tydec_seq_tail of {name: A.symbol, ty: A.ty, pos: pos} list |
          vardec of A.dec | fundec of A.fundec | tydec of {name: A.symbol, ty: A.ty, pos: pos} |
          ty of A.ty | tyfields of A.tfield list | tyfields_tail of A.tfield list |
          params of A.formals list | params_tail of A.formals list | 
          lvalue of A.var | lvalue_recurse of A.var | lvalue_array of A.var | lvalue_field of A.var

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc DO
%nonassoc THEN 
%nonassoc ELSE
%nonassoc ASSIGN
%nonassoc OF
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program	: exp	                  (exp)

exp : NIL		                  (A.NilExp)
    | INT                         (A.IntExp(INT))
    | STRING                      (A.StringExp(STRING, STRINGleft))
    | BREAK                       (A.BreakExp(BREAKleft))
    | arithmetic                  (arithmetic)
    | comparison                  (comparison)
    | bool_exp                    (bool_exp)
    | record                      (record)
    | func_call                   (func_call)
    | lvalue                      (A.VarExp(lvalue))
    | lvalue ASSIGN exp           (A.AssignExp({var=lvalue, exp=exp, pos=lvalueleft}))
    | LPAREN exp_seq RPAREN       (A.SeqExp(exp_seq))
    | MINUS exp %prec UMINUS      (A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft}))
    | IF exp THEN exp ELSE exp    (A.IfExp({test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft}))
    | IF exp THEN exp             (A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=IFleft}))
    | WHILE exp DO exp            (A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
    | LET decseq IN exp_seq END   (A.LetExp({decs=decseq, body=A.SeqExp(exp_seq), pos=LETleft}))
    | FOR ID ASSIGN exp 
      TO exp DO exp               (A.ForExp({var={name=make_sym(ID), escape=ref false}, 
                                             lo=exp1, hi=exp2, body=exp3, pos=FORleft}))
    | ID LBRACK exp RBRACK OF exp (A.ArrayExp({typ=make_sym(ID), size=exp1, 
                                               init=exp2, pos=IDleft}))


    
arithmetic : exp PLUS exp      (A.OpExp({left=exp1, oper=A.PlusOp,   right=exp2, pos=exp1left}))
           | exp MINUS exp     (A.OpExp({left=exp1, oper=A.MinusOp,  right=exp2, pos=exp1left}))
           | exp TIMES exp     (A.OpExp({left=exp1, oper=A.TimesOp,  right=exp2, pos=exp1left}))
           | exp DIVIDE exp    (A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left}))

comparison : exp EQ exp        (A.OpExp({left=exp1, oper=A.EqOp,  right=exp2, pos=exp1left}))
           | exp NEQ exp       (A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left}))
           | exp LT exp        (A.OpExp({left=exp1, oper=A.LtOp,  right=exp2, pos=exp1left}))
           | exp LE exp        (A.OpExp({left=exp1, oper=A.LeOp,  right=exp2, pos=exp1left}))
           | exp GT exp        (A.OpExp({left=exp1, oper=A.GtOp,  right=exp2, pos=exp1left}))
           | exp GE exp        (A.OpExp({left=exp1, oper=A.GeOp,  right=exp2, pos=exp1left}))

bool_exp   : exp AND exp   (A.IfExp({test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left}))
           | exp OR exp    (A.IfExp({test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left}))

record      : ID LBRACE RBRACE               (A.RecordExp({typ=make_sym(ID), fields=nil, pos=IDleft}))
            | ID LBRACE rec_entries RBRACE   (A.RecordExp({typ=make_sym(ID), fields=rec_entries, pos=IDleft}))
rec_entries : ID EQ exp                      ((make_sym(ID), exp, IDleft)::nil)
            | ID EQ exp COMMA rec_entries    ((make_sym(ID), exp, IDleft)::rec_entries)
              

func_call     : ID LPAREN RPAREN             (A.AppExp({func=make_sym(ID), args=nil, pos=IDleft}))
              | ID LPAREN func_args RPAREN   (A.AppExp({func=make_sym(ID), args=func_args, pos=IDleft}))
func_args     : exp                          (exp::nil)
              | exp COMMA func_args          (exp::func_args)
              
              
decseq           :                                   (nil)
                 | fundec_seq post_fun_dec_seq       (fundec_seq::post_fun_dec_seq)
                 | vardec decseq                     (vardec::decseq)
                 | tydec_seq post_ty_dec_seq         (tydec_seq::post_ty_dec_seq)
post_ty_dec_seq  : fundec_seq post_fun_dec_seq       (fundec_seq::post_fun_dec_seq)
                 | vardec decseq                     (vardec::decseq)
                 |                                   (nil)
post_fun_dec_seq : tydec_seq post_ty_dec_seq         (tydec_seq::post_ty_dec_seq)
                 | vardec decseq                     (vardec::decseq)
                 |                                   (nil)
fundec_seq       : fundec fundec_seq_tail            (A.FunctionDec(fundec::fundec_seq_tail))
fundec_seq_tail  : fundec fundec_seq_tail            (fundec::fundec_seq_tail)
                 |                                   (nil)
tydec_seq        : tydec tydec_seq_tail              (A.TypeDec(tydec::tydec_seq_tail))
tydec_seq_tail   : tydec tydec_seq_tail              (tydec::tydec_seq_tail)
                 |                                   (nil)
exp_seq          :                                   (nil)
                 | exp                               ((exp, expleft)::nil)
                 | exp SEMICOLON expseq_tail         ((exp, expleft)::expseq_tail)
expseq_tail      : exp                               ((exp, expleft)::nil)
                 | exp SEMICOLON expseq_tail         ((exp, expleft)::expseq_tail)
            
tydec            : TYPE ID EQ ty                     ({name=make_sym(ID), ty=ty, pos=TYPEleft})
ty               : ID                                (A.NameTy(make_sym(ID), IDleft))
                 | LBRACE tyfields RBRACE            (A.RecordTy(tyfields))
                 | ARRAY OF ID                       (A.ArrayTy(make_sym(ID), ARRAYleft))
tyfields         :                                   (nil)
                 | ID COLON ID tyfields_tail         (make_tyfield(ID1, ID2, IDleft)::tyfields_tail)
tyfields_tail    : COMMA ID COLON ID tyfields_tail   (make_tyfield(ID1, ID2, IDleft)::tyfields_tail)
                 |                                   (nil)
              
params           :                                   (nil)
                 | ID COLON ID params_tail           (make_param(ID1, ID2, IDleft)::params_tail)
params_tail      : COMMA ID COLON ID params_tail     (make_param(ID1, ID2, IDleft)::params_tail)
                 |                                   (nil)              
              
vardec           : VAR ID ASSIGN exp                 (A.VarDec({var={name=make_sym(ID), escape=ref false}, typ=NONE, init=exp, pos=VARleft}))
                 | VAR ID COLON ID ASSIGN exp        (A.VarDec({var={name=make_sym(ID1), escape=ref false}, typ=SOME(make_sym(ID2), ID2left), init=exp, pos=VARleft}))
fundec           : FUNCTION ID LPAREN params 
                   RPAREN EQ exp                     ({name=make_sym(ID), params=params, result=NONE, body=exp, pos=FUNCTIONleft})
                 | FUNCTION ID LPAREN params 
                   RPAREN COLON ID EQ exp            ({name=make_sym(ID1), params=params, result=SOME(make_sym(ID2), ID2left), body=exp, pos=FUNCTIONleft})  
              
lvalue        : ID    (A.SimpleVar(make_sym(ID), IDleft))
              | lvalue_recurse     (lvalue_recurse)
              
lvalue_recurse : lvalue_array      (lvalue_array)
               | lvalue_field      (lvalue_field)

lvalue_array  : ID LBRACK exp RBRACK               (A.SubscriptVar(A.SimpleVar(make_sym(ID), IDleft), exp, IDleft))
              | lvalue_recurse LBRACK exp RBRACK   (A.SubscriptVar(lvalue_recurse, exp, lvalue_recurseleft))

lvalue_field  : ID DOT ID (A.FieldVar(A.SimpleVar(make_sym(ID1), ID1left), make_sym(ID2), ID1left))
              | lvalue_recurse DOT ID  (A.FieldVar(lvalue_recurse, make_sym(ID), IDleft))      
